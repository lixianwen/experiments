// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: shell_executor.proto

// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative shell_executor.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShellExecutor_Exec_FullMethodName = "/shellexecutor.ShellExecutor/Exec"
)

// ShellExecutorClient is the client API for ShellExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellExecutorClient interface {
	Exec(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error)
}

type shellExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewShellExecutorClient(cc grpc.ClientConnInterface) ShellExecutorClient {
	return &shellExecutorClient{cc}
}

func (c *shellExecutorClient) Exec(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, ShellExecutor_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShellExecutorServer is the server API for ShellExecutor service.
// All implementations must embed UnimplementedShellExecutorServer
// for forward compatibility.
type ShellExecutorServer interface {
	Exec(context.Context, *Command) (*Result, error)
	mustEmbedUnimplementedShellExecutorServer()
}

// UnimplementedShellExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShellExecutorServer struct{}

func (UnimplementedShellExecutorServer) Exec(context.Context, *Command) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedShellExecutorServer) mustEmbedUnimplementedShellExecutorServer() {}
func (UnimplementedShellExecutorServer) testEmbeddedByValue()                       {}

// UnsafeShellExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellExecutorServer will
// result in compilation errors.
type UnsafeShellExecutorServer interface {
	mustEmbedUnimplementedShellExecutorServer()
}

func RegisterShellExecutorServer(s grpc.ServiceRegistrar, srv ShellExecutorServer) {
	// If the following call pancis, it indicates UnimplementedShellExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShellExecutor_ServiceDesc, srv)
}

func _ShellExecutor_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellExecutorServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShellExecutor_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellExecutorServer).Exec(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// ShellExecutor_ServiceDesc is the grpc.ServiceDesc for ShellExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shellexecutor.ShellExecutor",
	HandlerType: (*ShellExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ShellExecutor_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shell_executor.proto",
}
